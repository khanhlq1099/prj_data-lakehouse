version: '3.8'

x-airflow-common: &airflow-common
  image: airflow-customize
  # build: .
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    # - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
    - ./stock:/opt/airflow/stock
    - ./spark/app:/spark/app # Spark scripts folder (Must be the same path in airflow and Spark Cluster)
    - ./spark/resources:/spark/resources #Resources folder (Must be the same path in airflow and Spark Cluster)
  user: "${AIRFLOW_UID}:0"
  env_file:
    - .env

x-depends-on: &depends-on
  depends_on:
    postgres:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully

services:
  postgres:
    image: postgres:13
    # hostname: localhost
    container_name: postgres
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  airflow-webserver:
    <<: [*airflow-common, *depends-on]
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: [*airflow-common, *depends-on]
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

  # airflow-triggerer:
  #   <<: [*airflow-common, *depends-on]
  #   container_name: airflow-triggerer
  #   command: triggerer
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   restart: always

volumes:
  postgres_data:
    